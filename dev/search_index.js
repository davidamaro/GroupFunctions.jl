var documenterSearchIndex = {"docs":
[{"location":"sum_rules/#Sum-rules","page":"Sum rules","title":"Sum rules","text":"","category":"section"},{"location":"sum_rules/","page":"Sum rules","title":"Sum rules","text":"First, prepare the matrix using the simple factorization.","category":"page"},{"location":"sum_rules/","page":"Sum rules","title":"Sum rules","text":"    α1,β1,γ1 = rand(Float64,3)\n    xx=bloquesun(4,1,(α1,β1,γ1))\n    α2,β2 = rand(Float64,2)\n    yy=bloquesun(4,2,(α2,β2,α2))\n    α3,β3,γ3 = rand(Float64,3)\n    zz=bloquesun(4,1,(α3,β3,γ3))\n    α4,β4 = rand(Float64,3)\n    xx2=bloquesun(4,3,(α4,β4,α4))\n    α5,β5 = rand(Float64,2)\n    yy2=bloquesun(4,2,(α5,β5,α5))\n    α6,β6,γ6 = rand(Float64,3)\n    zz2=bloquesun(4,1,(α6,β6,γ6))\n\n    mat4 = xx*yy*zz\n    mat4c1 = xx*yy*zz*xx2*yy2","category":"page"},{"location":"sum_rules/","page":"Sum rules","title":"Sum rules","text":"Then obtain the basis states:","category":"page"},{"location":"sum_rules/","page":"Sum rules","title":"Sum rules","text":"    welcome = basis_states([2,0,0,0])","category":"page"},{"location":"sum_rules/","page":"Sum rules","title":"Sum rules","text":"Finally, compute the rate","category":"page"},{"location":"sum_rules/","page":"Sum rules","title":"Sum rules","text":"    rate1 = abs( group_function([2,0,0,0], welcome[9], welcome[9], mat4) )^2 + abs( group_function([2,0,0,0], welcome[9], welcome[4], mat4) )^2 + abs( group_function([2,0,0,0], welcome[9], welcome[7], mat4) )^2\n    rate2 = abs( group_function([2,0,0,0], welcome[9], welcome[9], mat4c1) )^2 + abs( group_function([2,0,0,0], welcome[9], welcome[4], mat4c1) )^2 + abs( group_function([2,0,0,0], welcome[9], welcome[7], mat4c1) )^2\n    rate1 ≈ rate2","category":"page"},{"location":"#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Julia package to compute entries of the irreducible representations of the unitary group (D-functions or group functions). It supports both numerical and symbolical group functions.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"#[Documentation](https://davidamaro.github.io/GroupFunctions.jl/dev/)","page":"Getting started","title":"Documentation","text":"","category":"section"},{"location":"#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"#If-Julia-is-already-installed","page":"Getting started","title":"If Julia is already installed","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Alternatively, you can install the package directly from the repository:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"user@machine:~$ mkdir new_code && cd new_code\nuser@machine:~$ julia --project=.\njulia> ] add https://github.com/davidamaro/GroupFunctions.jl","category":"page"},{"location":"#If-Julia-is-not-installed","page":"Getting started","title":"If Julia is not installed","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Mac: Use juliaup. Installing Julia via brew is not recommended.\nLinux: Use the appropriate package manager (e.g., sudo pacman -S julia).\nWindows: Run winget install julia -s msstore in your terminal and follow the steps.","category":"page"},{"location":"#Computing-a-single-group-function-(symbolical)","page":"Getting started","title":"Computing a single group function (symbolical)","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"my_fav_irrep = [2, 1, 0]\nmy_fav_basis = basis_states(my_fav_irrep)\noutput = group_function(my_fav_irrep, my_fav_basis[1], my_fav_basis[3])\njulia_to_mma(output)","category":"page"},{"location":"#Contact","page":"Getting started","title":"Contact","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"For questions and suggestions : david.amaroalcala@ucalgary.ca","category":"page"},{"location":"documentation/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"documentation/#Functions","page":"Documentation","title":"Functions","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"    group_function","category":"page"},{"location":"documentation/#GroupFunctions.group_function","page":"Documentation","title":"GroupFunctions.group_function","text":"group_function(λ::Irrep, tu::YoungTableau, tv::YoungTableau)\n\nReturns the symbolic group function corresponding to irrep λ and Young tableaux tu and tv.\n\nExample:\n\njulia> t = YoungTableau([2,1]); fill!(t, [1,2,3]);\njulia> group_function([2,1,0], t, t)\n\ngroup_function(λ::Irrep, tab_u::YTableau, tab_v::YTableau; verbose::Bool = false) -> Basic\n\nCompute group theoretical function based on Young tableaux and irreducible representations.\n\nArguments:\n\nλ::Irrep: Irreducible representation\ntab_u::YTableau: First Young tableau\ntab_v::YTableau: Second Young tableau\nverbose::Bool: Flag for detailed output (default: false)\n\nReturns:\n\nComplex: Group function evaluated\n\nNotes:\n\nUses SymEngine for symbolic computation\nInvolves matrix operations and coset calculations\n\n\n\n\n\ngroup_function(λ::Irrep, tu::GTPattern, tv::GTPattern)\n\nReturns the symbolic group function corresponding to irrep λ and GT patterns tu and tv.\n\nExample:\n\njulia> t = GTPattern([[2,1,0],[2,1],[2]],[2]);\njulia> group_function([2,1,0], t, t)\n\ngroup_function(λ::Irrep, pat_u::GTPattern, pat_v::GTPattern; verbose::Bool = false) -> Basic\n\nCompute group theoretical function based on Gelfand-Tsetlin patterns and irreducible representations.\n\nArguments:\n\nλ::Irrep: Irreducible representation\npat_u::GTPattern: First Gelfand-Tsetlin pattern\npat_v::GTPattern: Second Gelfand-Tsetlin pattern\nverbose::Bool: Flag for detailed output (default: false)\n\nReturns:\n\nBasic: Computed polynomial expression in SymEngine format\n\nNotes:\n\nConverts GT patterns to Young tableaux for calculations\nUses SymEngine for symbolic computation\n\n\n\n\n\ngroup_function(λ::Irrep, tu::GTPattern, tv::GTPattern, mat::Array{Complex{Float64},2})\n\nReturns the numeric group function, for an SU(n) member mat, corresponding to irrep λ and a pair of GT patterns tu and tv.\n\njulia> using RandomMatrices\njulia> mat = rand(Haar(2),3)\njulia> t = GTPattern([[2,1,0],[2,1],[2]],[2]);\njulia> group_function([2,1,0], t, t, mat)\n\n\n\n\n\ngroup_function(λ::Irrep, tu::GTPattern, tv::GTPattern, mat::Array{Complex{Float64},2})\n\nReturns the numeric group function, for an SU(n) member mat, corresponding to irrep λ and STYT tu and tv.\n\nExample:\n\njulia> using RandomMatrices\njulia> mat = rand(Haar(2),3)\njulia> t = YoungTableau([2,1]); fill!(t, [1,2,3]);\njulia> group_function([2,1,0], t, t, mat)\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Gelfand-Tsetlin-patterns","page":"Documentation","title":"Gelfand-Tsetlin patterns","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"GT patterns are used to denote the basis states.","category":"page"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"    GTPattern","category":"page"},{"location":"documentation/#GroupFunctions.GTPattern","page":"Documentation","title":"GroupFunctions.GTPattern","text":"GTPattern(arrayofarrays)\n\nExample:\n\njulia> GTPattern([[2,1,0],[2,1],[2]])\n│ 2 1 0 ╲\n│ 2 1    〉\n│ 2     ╱\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"docstrings/","page":"Index","title":"Index","text":"","category":"page"}]
}
